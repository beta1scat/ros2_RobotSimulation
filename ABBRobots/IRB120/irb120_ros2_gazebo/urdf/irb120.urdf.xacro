<?xml version="1.0" ?>

<!-- 

# ===================================== COPYRIGHT ===================================== #
#                                                                                       #
#  IFRA (Intelligent Flexible Robotics and Assembly) Group, CRANFIELD UNIVERSITY        #
#  Created on behalf of the IFRA Group at Cranfield University, United Kingdom          #
#  E-mail: IFRA@cranfield.ac.uk                                                         #
#                                                                                       #
#  Licensed under the Apache-2.0 License.                                               #
#  You may not use this file except in compliance with the License.                     #
#  You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0  #
#                                                                                       #
#  Unless required by applicable law or agreed to in writing, software distributed      #
#  under the License is distributed on an "as-is" basis, without warranties or          #
#  conditions of any kind, either express or implied. See the License for the specific  #
#  language governing permissions and limitations under the License.                    #
#                                                                                       #
#  IFRA Group - Cranfield University                                                    #
#  AUTHORS: Mikel Bueno Viso - Mikel.Bueno-Viso@cranfield.ac.uk                         #
#           Seemal Asif      - s.asif@cranfield.ac.uk                                   #
#           Phil Webb        - p.f.webb@cranfield.ac.uk                                 #
#                                                                                       #
#  Date: July, 2022.                                                                    #
#                                                                                       #
# ===================================== COPYRIGHT ===================================== #

# ===================================== COPYRIGHT ===================================== #
#                                                                                       #
#  Some of the information used to build the ROS2 ABB-IRB120 .urdf files in this ROS2   #
#  repository has been taken from the following resource:                               #
#       - abb_experimental (https://github.com/ros-industrial/abb_experimental)         #
#                                                                                       #
#  AUTHORS:                                                                             #
#       - ROS-Industrial - https://rosindustrial.org                                    #
#       - Mark Culleton (Trinity College Dublin) - culletom@tcd.ie                      #
#       - Kevin Kelly   (Trinity College Dublin)                                        #
#                                                                                       #
#  COPYRIGHT - ROS-Industrial                                                           #
#  (ORIGINAL LICENSE) -> Licensed under the Apache-2.0 License.                         #
#                                                                                       #
#  CHANGES MADE:                                                                        #
#  The original files contain the .urdf information of the robot for ROS1, and these    #
#  have been modified for ROS2.                                                         #
#                                                                                       #
# ===================================== COPYRIGHT ===================================== #

# ======= CITE OUR WORK ======= #
# You can cite our work with the following statement:
# IFRA (2022) ROS2.0 ROBOT SIMULATION. URL: https://github.com/IFRA-Cranfield/ros2_RobotSimulation.

-->

<robot name="irb120" xmlns:xacro="http://ros.org/wiki/xacro">

  <link name="camera_link">
    <collision name="camera_link_collision">
      <geometry>
        <box size="0.1 0.1 0.05"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
    <visual name="camera_link_visual">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="file://$(find irb120_ros2_gazebo)/meshes/camera/EpicEyeS-M.dae"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="2"/>
      <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
    </inertial>
  </link>
  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link = "camera_link"/>
    <origin xyz="0.35 -0.3 1.0" rpy="0.0 ${pi} ${pi/2}"/>
  </joint>
  <gazebo reference="base_link">
    <sensor name="RGBD_camera" type="depth">
      <always_on>true</always_on>
      <update_rate>1</update_rate>
      <!-- Default pose wrt to world is [0 0 0 -pi/2 0 -pi/2] (xyz, rpy) -->
      <!-- camera Z = world X, camera Y = world -Z, camera X = world -Y -->
      <!-- x y z R P Y -->
      <pose>0.35 -0.3 1.0 0.0 ${pi/2} 0.0</pose>
      <camera name="realsense_depth_camera">
        <horizontal_fov>0.6</horizontal_fov>
        <image>
          <width>320</width>
          <height>240</height>
          <format>B8G8R8</format>
        </image>
        <clip>
          <near>0.5</near>
          <far>1.5</far>
        </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <camera_name>RGBD_camera</camera_name>
        <frame_name>camera_link</frame_name>
        <hack_baseline>0.07</hack_baseline>
        <min_depth>0.05</min_depth>
        <max_depth>8.0</max_depth>
      </plugin>
    </sensor>
  </gazebo>
  <link name="camera_link_2D">
    <collision name="camera_link_collision">
      <geometry>
        <box size="0.02 0.02 0.04"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
    <visual name="camera_link_visual">
      <geometry>
        <box size="0.01 0.02 0.03"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </visual>
  </link>
  <joint name="camera_joint_2D" type="fixed">
    <parent link="base_link"/>
    <child link = "camera_link_2D"/>
    <origin xyz="0.0 0.573971 0.7" rpy="0.0 ${pi/2} 0.0"/>
  </joint>
  <!-- camera -->
  <gazebo reference="camera_link_2D">
    <sensor type="camera" name="camera1">
      <update_rate>1.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>2000</width>
          <height>2000</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.0</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller_2D" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera_2D</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link_2D</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo>
      <plugin name="gazebo_grasp_fix" filename="libgazebo_grasp_fix.so">
        <!--
              NOTE: The finger tips are linked together with the links before, because they are connected with a
        fixed joint. Gazebo makes one whole link out of this automatically. When listing the 9_*_tip links
        here, they won't be found in the SDF.
              -->
              <arm>
                  <arm_name>irb120</arm_name>
                  <palm_link>EE_egp64</palm_link>
                  <gripper_link>egp64_finger_left_link</gripper_link>
                  <gripper_link>egp64_finger_right_link</gripper_link>
              </arm>
        <forces_angle_tolerance>100</forces_angle_tolerance>
        <update_rate>30</update_rate>
        <grip_count_threshold>4</grip_count_threshold>
        <max_grip_count>8</max_grip_count>
        <release_tolerance>0.005</release_tolerance>
        <disable_collisions_on_attach>false</disable_collisions_on_attach>
        <contact_topic>__default_topic__</contact_topic>
      </plugin>
    </gazebo>
  <!-- ===== ARGUMENTS ===== -->

  <!-- CELL LAYOUT:  -->
  <xacro:arg name="cell_layout_1" default="false"/>
  <xacro:property name="cell_layout_1" value="$(arg cell_layout_1)"/>
  <xacro:arg name="cell_layout_2" default="false"/>
  <xacro:property name="cell_layout_2" value="$(arg cell_layout_2)"/>
  <xacro:arg name="cell_layout_3" default="false"/>
  <xacro:property name="cell_layout_3" value="$(arg cell_layout_3)"/>

  <!-- END-EFFECTOR:  -->
  <xacro:arg name="EE_no" default="false"/>
  <xacro:property name="EE_no" value="$(arg EE_no)"/>
  <xacro:arg name="EE_schunk" default="false"/>
  <xacro:property name="EE_schunk" value="$(arg EE_schunk)"/>


  <!-- Include XACRO-MACRO file of the IRB120: -->
  <xacro:include filename="$(find irb120_ros2_gazebo)/urdf/irb120_macro.urdf.xacro"/>
  <xacro:irb120
    prefix=""
    EE_no="${EE_no}"
    EE_schunk="${EE_schunk}"
  />

  <!-- Gazebo WORLD link: -->
  <link name="world"/>

  <!-- ========== ========== ========== ========== ========== ========== -->
  <!-- CELL LAYOUT SELECTION: -->

  <!-- CELL LAYOUT N1) ABB IRB120 Robot alone: -->
  <xacro:if value="${cell_layout_1}">
    <joint name="world-base_link-fixed" type="fixed">
      <parent link="world"/>
      <child link="base_link"/>
    </joint>
  </xacro:if>

  <!-- CELL LAYOUT N2) ABB IRB120 Robot in Cranfield University cell: -->
  <xacro:if value="${cell_layout_2}">
    <link name="cell">
      <visual>
        <origin xyz="-0.21 -0.357 0.0" rpy="0 0 0" />
        <geometry>
          <mesh filename="file://$(find irb120_ros2_gazebo)/meshes/irb120_cell.dae" scale="1 1 1" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="-0.21 -0.357 0.0" rpy="0 0 0" />
        <geometry>
          <mesh filename="file://$(find irb120_ros2_gazebo)/meshes/irb120_cell.dae" scale="1 1 1" />
        </geometry>
      </collision>
      <inertial>
        <mass value="1000.0"/>
        <inertia ixx="500.0" ixy="500.0" ixz="500.0" iyy="500.0" iyz="500.0" izz="500.0" />
      </inertial>
    </link>
    <joint name="world-cell-fixed" type="fixed">
      <parent link="world"/>
      <child link="cell"/>
    </joint>
    <joint name="cell-base_link-fixed" type="fixed">
      <parent link="cell"/>
      <child link="base_link"/>
      <origin xyz="0.0 0.0 0.015" rpy="0.0 0.0 0.0" />
    </joint>
  </xacro:if>

  <!-- CELL LAYOUT N3) ABB IRB120 + PICK & PLACE layout: -->
  <xacro:if value="${cell_layout_3}">
    <link name='irb120_block'>
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="100"/>
        <inertia ixx="0.01"  ixy="0"  ixz="0" iyy="0.01" iyz="0" izz="0.01" />
      </inertial>
      <collision name='collision'>
        <origin xyz="0 0 0" rpy=" 0 0 0"/>
        <geometry>
          <box size = "0.2 0.2 0.5"/>
        </geometry>
      </collision>
      <visual name='chassis_visual'>
        <origin xyz="0 0 0" rpy=" 0 0 0"/>
        <geometry>
          <box size = "0.2 0.2 0.5"/>
        </geometry>
        <material name="red">
          <color rgba="1 0 0 1"/>
        </material>
      </visual>
    </link>
    <joint name="world_joint" type="fixed">
      <parent link="world" />
      <child link = "irb120_block" />
      <origin xyz="0.0 0.0 0.25" rpy="0.0 0.0 0.0" />
    </joint>
    <joint name="block-base" type="fixed">
      <parent link="irb120_block" />
      <child link = "base_link" />
      <origin xyz="0.0 0.0 0.255" rpy="0.0 0.0 0.0" />
    </joint>
    <link name='table'>
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="100"/>
        <inertia ixx="0.01"  ixy="0"  ixz="0" iyy="0.01" iyz="0" izz="0.01" />
      </inertial>
      <collision name='collision'>
        <origin xyz="0 0 0" rpy=" 0 0 0"/>
        <geometry>
          <box size = "0.5 1.0 0.7"/>
        </geometry>
      </collision>
      <visual name='chassis_visual'>
        <origin xyz="0 0 0" rpy=" 0 0 0"/>
        <geometry>
          <box size = "0.5 1.0 0.7"/>
        </geometry>
        <material name="black">
          <color rgba="1 0 0 1"/>
        </material>
      </visual>
    </link>
    <joint name="table_world" type="fixed">
      <parent link="world" />
      <child link = "table" />
      <origin xyz="0.7 0.0 0.35" rpy="0.0 0.0 0.0" />
    </joint>
  </xacro:if>

</robot>